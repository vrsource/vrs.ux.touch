Ext.data.JsonP.command({"title":"Sencha Command","guide":"<h1>Using Sencha Command</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/command-section-1'>Requirements</a></li>\n<li><a href='#!/guide/command-section-2'>Getting Started</a></li>\n<li><a href='#!/guide/command-section-3'>Creating a New Application</a></li>\n<li><a href='#!/guide/command-section-4'>Understanding Your Application's Structure</a></li>\n<li><a href='#!/guide/command-section-5'>Developing Your Application</a></li>\n<li><a href='#!/guide/command-section-6'>Upgrading Your Application</a></li>\n<li><a href='#!/guide/command-section-7'>Deploying Your Application</a></li>\n<li><a href='#!/guide/command-section-8'>Packaging Your Application for Distribution on App Stores</a></li>\n<li><a href='#!/guide/command-section-9'>Troubleshooting</a></li>\n</ol>\n</div>\n\n<p>Sencha Command is a cross-platform command line tool that helps make developing applications with Sencha SDKs full of enjoyment. The tool consists of many useful automated tasks around the full life-cycle of your applications, from generating a fresh new project to deploying for production.</p>\n\n<h2 id='command-section-1'>Requirements</h2>\n\n<p>Please note the content of this guide currently applies only to Sencha Touch 2.</p>\n\n<p>Step 1: Setup an HTTP server on your computer if you don't have one running. This guide assumes that the host name is <code>localhost</code>, and the document root is at <code>/path/to/www</code></p>\n\n<p>Step 2: Download and install the <a href=\"http://www.sencha.com/products/sdk-tools\">latest SDK Tools</a> on your development machine. The latest version as of this writing is 2.0.0-beta2.</p>\n\n<p>Step 3: Download the <a href=\"http://www.sencha.com/products/touch/\">latest Sencha Touch 2 SDK</a>. Extract the SDK to a local directory. The latest version as of this writing is 2.0.1-rc.</p>\n\n<p>Step 4: Verify that Sencha Command is working properly on your machine:</p>\n\n<p>Open a command line terminal, and run the following commands. Replace <code>/path/to/sencha-touch-2-sdk</code> with the actual path to the SDK that you extracted to previously (<strong>not the SDK Tools directory</strong>), as mentioned in Step 2.</p>\n\n<pre><code>cd /path/to/sencha-touch-2-sdk\nsencha\n</code></pre>\n\n<p>If a help message appears with the first line that says: \"Sencha Command v2.0.1\", you are all set.</p>\n\n<h2 id='command-section-2'>Getting Started</h2>\n\n<p>All commands have the exact same syntax as follows:</p>\n\n<pre><code>sencha [module] [action] [arguments...]\n</code></pre>\n\n<p>Some typical examples:</p>\n\n<pre><code># Minify app.js and write the output to app.minified.js\nsencha fs minify app.js app.minified.js\n\n# Create a new project based on the current SDK with namespace 'MyApp' and store inside '/path/to/www/myapp'\nsencha app create MyApp /path/to/www/myapp\n</code></pre>\n\n<p>To see a list of all available modules, simply type: <code>sencha</code> (when the current working directory is either the SDK directory or a project directory)</p>\n\n<p>Similarly, to see a list of all available actions for a specific module, run: <code>sencha [module]</code>, for example: <code>sencha app</code></p>\n\n<p>Lastly, typing <code>sencha [module] [action]</code> prints out the full list of arguments for that typical action, for example: <code>sencha app create</code></p>\n\n<h2 id='command-section-3'>Creating a New Application</h2>\n\n<p>The following command generates a new application with the namespace <code>MyApp</code> to <code>/path/to/www/myapp</code>:</p>\n\n<pre><code>#  Make sure the current working directory is the Sencha Touch 2 SDK\ncd /path/to/sencha-touch-2-sdk\nsencha app create MyApp /path/to/www/myapp\n</code></pre>\n\n<p>To try it out, simply point your (WebKit-based) browser to <code>http://localhost/myapp</code>.</p>\n\n<p>Congratulations, you have just created a fully working Sencha Touch 2 application in seconds!</p>\n\n<h2 id='command-section-4'>Understanding Your Application's Structure</h2>\n\n<p>The generated application should have the following file structure:</p>\n\n<pre><code>app                     # Your application's source code in MVC structure\n    controller\n    model\n    profile\n    store\n    view\n        Main.js         # The main view of the application\n\nresources\n    css\n        app.css         # The main stylesheet, compiled from app.scss\n\n    sass\n        app.scss        # The SASS file which compiles to app.css above,\n                        # includes Sencha Touch 2 theme by default\n\n    icons               # Application icons for all mobile devices\n                        # When replacing these default images with your own,\n                        # make sure the file name and the dimension stays exactly the same\n        ...\n    loading             # Application start-up screens for iOS devices\n                        # Similarly to icons, make sure the file names and\n                        # dimension stays the same\n        ...\n    images              # Put other images used by your application here\n\nsdk                     # A copy of the SDK from which this application was generated\n    ...\n\nindex.html\napp.js                  # Contains application's initialization logics\napp.json                # Configuration for deployment\npackager.json           # Configuration for native packaging\n</code></pre>\n\n<p>Both app.json and packager.json have inline documentation for each configurable item. Simply open the files and edit them as you need.</p>\n\n<h2 id='command-section-5'>Developing Your Application</h2>\n\n<p><code>sencha generate</code> helps you quickly generate common MVC components such as: Controller, Model and Profile.</p>\n\n<p>For example:</p>\n\n<pre><code>#  Make sure the current working directory is the application's directory, i.e 'cd /path/to/www/myapp'\nsencha generate model User --fields=id:int,name,email\n</code></pre>\n\n<p>The command above will automatically generate a new Model class named <code>User</code> with 3 fields of <code>id</code>, <code>name</code> and <code>email</code> to app/model/User.js, and add its reference to your app.js.</p>\n\n<h2 id='command-section-6'>Upgrading Your Application</h2>\n\n<p>Generated applications always have their own copies of the SDK from which they were originally generated. Upgrading your application to the a new of the SDK means replacing the old copy with the new one.</p>\n\n<p>Starting from SDK Tools v2.0.0-beta2 and Sencha Touch SDK v2.0.1-rc, you can seamlessly upgrade your application to the new downloaded SDK using <code>sencha app upgrade</code>. Firstly do make sure your current working directory is the <strong>new</strong> SDK directory:</p>\n\n<pre><code>cd /path/to/new_version_of_sdk\n</code></pre>\n\n<p>then run:</p>\n\n<pre><code>sencha app upgrade /path/to/your_application\n</code></pre>\n\n<h2 id='command-section-7'>Deploying Your Application</h2>\n\n<p>Developing your application simply means editing source code and refreshing the browser. All source files are dynamically loaded on demand. There's no building process involved.</p>\n\n<p>When it comes to deployment, Sencha Command provides 4 different build environment options, namely 'testing', 'package', 'production' and 'native':</p>\n\n<ul>\n<li>'testing' is meant for QA prior to production. All JavaScript and CSS source Files are bundled, but not minified, which makes it easier for debugging if needed</li>\n<li>'package' creates a self-contained, re-distributable production build that normally runs from local file system without the need for a web server</li>\n<li>'production' creates a production build that is normally hosted on a web server and serves multiple clients (devices). The build is offline-capable using HTML 5 application cache, and has built-in over-the-air delta updating feature</li>\n<li>'native' first generates a 'package' build, then packages it as a native application, ready to be deployed to native platforms</li>\n</ul>\n\n\n<p>As an example, the following command generates a 'testing' build for your application:</p>\n\n<pre><code>#  Make sure the current working directory is the application's directory you're deploying, i.e 'cd /path/to/www/myapp'\nsencha app build testing\n</code></pre>\n\n<p>And similarly when you're ready for production deployment:</p>\n\n<pre><code>sencha app build production\n</code></pre>\n\n<p>The default deployment paths are taken from the <code>buildPaths</code> item inside <code>app.json</code>. For more details on optional arguments, run</p>\n\n<pre><code>sencha app build\n</code></pre>\n\n<p>Sencha Command automates all optimizations for your application, including but not limited to:</p>\n\n<ul>\n<li>Resolving dependencies required by the application and only including exactly what is used for optimal file size / performance</li>\n<li>Enabling HTML 5 application cache via automatic generation of cache.manifest and resources checksum</li>\n<li>Minifying all JavaScript and CSS assets</li>\n<li>Storing all JavaScript and CSS assets inside Local Storage on first load, and patches them via delta updates between releases</li>\n</ul>\n\n\n<p>As a result, your production build can load instantly on subsequent access and updates on-the-fly with minimal network transfer.</p>\n\n<p><strong>Important Note</strong>: The <code>cache.manifest</code> file is automatically generated for you. However, please make sure that your web server serves it with the correct <code>Content-Type</code> header of <code>text/cache-manifest</code>. To learn more about HTML 5 application cache, please refer to <a href=\"http://www.html5rocks.com/en/tutorials/appcache/beginner/\">this article</a>.</p>\n\n<h2 id='command-section-8'>Packaging Your Application for Distribution on App Stores</h2>\n\n<p><code>packager.json</code> contains all configurable values to package your application.</p>\n\n<p>If you are using OS X and have Xcode installed, this one-liner will automatically package your application and run it on iOS Simulator:</p>\n\n<pre><code>sencha app build native\n</code></pre>\n\n<p>For more details on working with <code>packager.json</code>, please refer to the <a href=\"#!/guide/native_packaging\">Native Package guide</a></p>\n\n<h2 id='command-section-9'>Troubleshooting</h2>\n\n<h3>Command Not Found</h3>\n\n<p>Upon running <code>sencha</code>, if there is an error message appears saying \"sencha: command not found\" on OS X / Linux or \"'sencha' is not recognized as an internal or external command,\noperable program or batch file.\" on Windows, follow these steps to troubleshoot:</p>\n\n<ul>\n<li>Close all existing terminal / command prompt windows and re-open them.</li>\n<li>Make sure that Sencha SDK Tools is properly installed:\n\n<ul>\n<li>The installation directory exists. By default, the installation path is <code>/Applications/SenchaSDKTools-{version}</code> on OS X, <code>/opt/SenchaSDKTools-{version}</code> on Linux, and <code>C:\\Program Files\\SenchaSDKTools-{version}</code></li>\n<li>The path to SDK Tools directory is prepended to your system's PATH environment variable. From the terminal, run <code>echo $PATH</code> (<code>echo %PATH%</code> on Windows). The SDK Tools directory should be displayed in part of the output. If this is not the case, add it to your PATH manually.</li>\n<li>The environment variable <code>SENCHA_SDK_TOOLS_{version}</code> is set, with the value being the absolute path to the installation directory mentioned above. For example: If the installed version is '2.0.0-beta2', a <code>SENCHA_SDK_TOOLS_2_0_0_BETA2</code> must be set. From the terminal, run <code>echo $SENCHA_SDK_TOOLS_2_0_0_BETA2</code> (<code>echo %SENCHA_SDK_TOOLS_2_0_0_BETA2%</code> on Windows). If the output is empty, set the environment variable manually.</li>\n</ul>\n</li>\n</ul>\n\n\n<h3>Wrong Current Directory</h3>\n\n<p>A common mistake is not running <code>sencha</code> command within either a valid SDK directory or an application directory. If the current directory is not a SDK or application directory, <code>sencha</code> command will fallback to backwards-compatible mode. As of SDK Tools release '2.0.0-beta2', you should see a clear warning in such case:</p>\n\n<pre><code>The current working directory (...) is not a recognized Sencha SDK or application folder. Running in backwards compatible mode.\n</code></pre>\n\n<p>Note that a valid application directory is one that was generated by Sencha Command, or one that properly follows the structure described above.</p>\n\n<h3>Errors While Resolving Dependencies</h3>\n\n<p>When deploying the application using <code>sencha app build</code> command, by default your application is launched via file system protocol inside a headless WebView to extract its dependencies. In other words, your application needs to load without errors for the build process to work properly.</p>\n\n<p>Always develop with the debugger console enabled (Web Inspector for Safari / Developer Tools for Chrome) and resolve all warnings / error messages as they appear. Whenever you see a warning like this:</p>\n\n<pre><code>[<a href=\"#!/api/Ext.Loader\" rel=\"Ext.Loader\" class=\"docClass\">Ext.Loader</a>] Synchronously loading 'Ext.foo.Bar'; consider adding 'Ext.foo.Bar' explicitly as a require of the corresponding class\n</code></pre>\n\n<p>Immediately add 'Ext.foo.Bar' inside the <code>requires</code> array property of the class from which the dependency originates. If it is a application-wide dependency, add it to the <code>requires</code> array property inside <code><a href=\"#!/api/Ext-method-application\" rel=\"Ext-method-application\" class=\"docClass\">Ext.application</a>(...)</code> statement.</p>\n\n<p>If your application relies on any dynamic server-side scripting, for example: loading class configuration from a PHP script, you must set the <code>'url'</code> item inside <code>'app.json'</code> to the absolute URL from which your application can be loaded on a web browser. For example:</p>\n\n<pre><code>// app.json\n{\n    \"url\": \"http://localhost/myapp/\",\n    // ...\n}\n</code></pre>\n"});